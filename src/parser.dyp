%start main

%lexer

main lexer =
[' ' '\t'] ->
['1'-'9']?['0'-'9']+ -> INT { int_of_string (Dyp.lexeme lexbuf) }
(['1'-'9']?['0'-'9']*('.'['0'-'9']+)?) -> FLOAT { float_of_string (Dyp.lexeme lexbuf) }
"\"" -> DQUOTE
"'" -> SQUOTE
([^'"']|['\\']['"']) -> DSTRCH { Dyp.lexme lexbuf }
([^''']|['\\'][''']) -> SSTRCH { Dyp.lexme lexbuf } 
"+" -> PLUS
"-" -> MINUS
"*" -> TIMES
"/" -> DIV
"=" -> EQUAL
":" -> COLON
"(" -> LPAREN
")" -> RPAREN
"<" -> LT
">" -> GT
"{" -> LBLOCK
"}" -> RBLOCK

%parser

main
  : expr { $1 }

expr:
  | require_def { $1 }
  | var_def { $1 }
  | let_def { $1 }
  | function_def { $1 }
  | anon_func_def { $1 }
  | class_def { $1 }
  | record_def { $1 }
  | macro_def { $1 }
  | while_def { $1 }
  | if_def { $1 }
  | match_def { $1 }
  | method_call_def { $1 }
  | array_def { $1 }
  | tuple_def { $1 }
  | statement_def { $1 }

require_def:
  | "require" str { Ast.REQUIRE($2) }

str:
  | DQUOTE dstr_contents DQUOTE
  | SQUOTE sstr_contents SQUOTE

dstr_contents:
  | dstr_contents DSTRCH
  | DSTRCH

sstr_contents:
  | sstr_contents SSTRCH
  | SSTRCH